// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Vault {
  id       Int    @id @default(autoincrement())
  filePath String @unique // Two vaults can't have the same file path

  Post       Post[]
  PostAuthor PostAuthor[]
  Tag        Tag[]

  createdAt DateTime @default(now())
}

model Post {
  id      Int   @id @default(autoincrement())
  vault   Vault @relation(fields: [vaultId], references: [id])
  vaultId Int

  postBody    String? // The contents of the post
  postSpoiler String? // Fediverse Posts may contain a CW
  media       Media[]

  author       PostAuthor @relation(fields: [postAuthorId], references: [id])
  postAuthorId Int

  sourceUrl             String?
  fallbackUrlsArrayLike String? // Stringified JSON e.g. ["https://example.com/1","https://example.com/2"]

  // M-N Relationship 
  tags TagsOnPosts[]

  createdAt DateTime @default(now())
}

model Media {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  mediaType  String // 'image' or 'video'
  fileSlug   String
  PostAuthor PostAuthor[]

  createdAt DateTime @default(now())
}

model PostAuthor {
  id      Int   @id @default(autoincrement())
  vault   Vault @relation(fields: [vaultId], references: [id])
  vaultId Int

  name                 String
  handlesArrayLike     String
  profileUrlsArrayLike String

  profilePictureSlug    String?
  profilePictureMedia   Media?  @relation(fields: [profilePictureMediaId], references: [id])
  profilePictureMediaId Int?

  Post Post[]

  createdAt DateTime @default(now())
}

model Tag {
  id      Int   @id @default(autoincrement())
  vault   Vault @relation(fields: [vaultId], references: [id])
  vaultId Int

  name             String
  aliasesArrayLike String // stringified JSON

  // M-N relationship
  posts TagsOnPosts[]

  createdAt DateTime @default(now())
}

model TagsOnPosts {
  post   Post @relation(fields: [postId], references: [id])
  postId Int // relation scalar field (used in the `@relation` attribute above)

  tag   Tag @relation(fields: [tagId], references: [id])
  tagId Int

  @@id([postId, tagId])
}
